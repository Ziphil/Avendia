<?xml version="1.0" encoding="UTF-8"?>

<page>
  <name>ABC089-D: 累積和</name>

  <h1>日記 (2018 年 3 月 4 日)</h1>
  <p>
    ABC089 に出てきました。
    結果は、4 問正解 1000 点で 1159 人中 331 位でした。
    レートは 948 (緑) に微増しました。
  </p>
  <p>
    さて、ABC089 の D 問題についてまとめましょう。
    問題は<a href="https://beta.atcoder.jp/contests/abc089/tasks/abc089_d" target="_blank">こちら</a>です。
    魔法少女になります。
  </p>
  <p>
    愚直にやると、<i>i</i> 回目の実技試験において、特定の数字が書かれているマスの検索を (<i>R</i><sub><i>i</i></sub> － <i>L</i><sub><i>i</i></sub>)/<i>D</i> 回行う必要があります。
    検索も何も工夫しなければ <i>O</i>(<i>HW</i>) かかり、検索回数も最大で <i>O</i>(<i>HW</i>) です。
    この操作を <i>Q</i> 回やるので、全体の計算量は最大で <i>O</i>(<i>H</i><sup>2</sup><i>W</i><sup>2</sup><i>Q</i>) です。
    なんか無理そうです。
  </p>
  <p>
    そこで <i>A</i> をそのまま保持するのではなく、各数に対してそれが書かれるマスの座標を保持するようにしましょう。
    このようにすることで検索の手間が省けるので、計算量が <i>O</i>(<i>H</i><i>W</i><i>Q</i>) になります。
    これでもまだ微妙に遅く、実際 TLE します。
    ということで、さらなる高速化をする必要があります。
  </p>
  <p>
    <i>x</i> が書かれているマスから <i>x</i> ＋ <i>D</i> が書かれているマスに駒を動かすのに必要な魔力を <i>M</i>(<i>x</i>) とおくと、<i>i</i> 回目の実技試験で消費する魔力は <i>M</i>(<i>L</i><sub><i>i</i></sub>) ＋ <i>M</i>(<i>L</i><sub><i>i</i></sub> ＋ <i>D</i>) ＋ <i>M</i>(<i>L</i><sub><i>i</i></sub> ＋ 2<i>D</i>) ＋ ･･･ ＋ <i>M</i>(<i>R</i><sub><i>i</i></sub> － <i>D</i>) で求まります。
    ここで、各 <i>x</i> に対して <i>m</i> ＝ <i>x</i> ％ <i>D</i> とおき、<i>M</i><sub>acc</sub>(<i>x</i>) ＝ <i>M</i>(<i>m</i>) ＋ <i>M</i>(<i>m</i> ＋ <i>D</i>) ＋ <i>M</i>(<i>m</i> ＋ 2<i>D</i>) ＋ ･･･ ＋ <i>M</i>(<i>x</i> － <i>D</i>) と定めれば、先程の消費魔力は <i>M</i><sub>acc</sub>(<i>R</i><sub><i>i</i></sub>) － <i>M</i><sub>acc</sub>(<i>L</i><sub><i>i</i></sub>) と書けます。
    したがって、<i>M</i><sub>acc</sub>(<i>x</i>) をあらかじめ計算しておけば、各実技試験での消費魔力は <i>O</i>(1) で求めることができます。
    <i>M</i><sub>acc</sub>(<i>x</i>) の計算は <i>O</i>(<i>H</i><i>W</i>) でできるので、全体の計算量は <i>O</i>(<i>H</i><i>W</i> ＋ <i>Q</i>) となり、高速化できました。
  </p>
  <p>
    このように、特定の和を何度も計算するような場合は、適当な始点から累積した和をあらかじめ計算しておくことで、その累積和の差を計算するだけで求めたい部分和を計算することができます。
  </p>
  <p>
    ということで、全てのテストケースに通るプログラムが以下のような感じです。
  </p>
  <pre>
    public void run() {
      BetterScanner scanner = new BetterScanner(System.in);

      int h = scanner.nextInt();
      int w = scanner.nextInt();
      int d = scanner.nextInt();

      // 各数に対してそれが書かれる座標を保持
      int[][] poss = new int[2][h * w];
      for (int i = 0 ; i &lt; h ; i ++) {
        for (int j = 0 ; j &lt; w ; j ++) {
          int num = scanner.nextInt() - 1;
          poss[0][num] = i;
          poss[1][num] = j;
        }
      }

      // 累積和を計算
      long[] accs = new long[h * w];
      for (int k = 0 ; k &lt; d ; k ++) {
        long acc = 0;
        for (int num = k + d ; num &lt; h * w ; num += d) {
          int diffX = poss[0][num - d] - poss[0][num];
          int diffY = poss[1][num - d] - poss[1][num];
          if (diffX &lt; 0) {
            diffX = -diffX;
          }
          if (diffY &lt; 0) {
            diffY = -diffY;
          }
          acc += diffX + diffY;
          accs[num] = acc;
        }
      }

      int q = scanner.nextInt();
      StringBuilder output = new StringBuilder();
      for (int k = 0 ; k &lt; q ; k ++) {
        int l = scanner.nextInt() - 1;
        int r = scanner.nextInt() - 1;
        long result = accs[r] - accs[l];
        output.append(result).append("\n");
      }
      System.out.println(output.toString());
    }
  </pre>
  <p>
    ちなみに本番では、最初の 2 重ループの順番を逆にしていて、実時間とペナルティ合わせて 45 分を無に帰しました。
    つらいです。
  </p>

</page>
