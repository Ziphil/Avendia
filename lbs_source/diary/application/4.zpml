<?xml version="1.0" encoding="UTF-8"?>

<page>
  <name>Groovy のループ速度比較</name>

  <h1>日記 (2016 年 11 月 9 日)</h1>
  <p>
    プログラムでループを回すというのはよくやると思うんですが、Groovy ではループの方法が主に for 文と <m>each</m> メソッドの 2 通りあります。
    速度にどのくらいの違いがあるのか気になったので調べてみました。
  </p>
  <p>
    まずは Java でもよくやる由緒正しき for 文です。
    ついでに、ループ回数を保持する変数がプリミティブ (<m>int</m>) である場合とラッパークラス (<m>Integer</m>) である場合も比較しておきます。
    Groovy では、プリミティブで宣言しても内部的には全てラッパークラスで扱われるらしいんですが、どう違いが出てくるんでしょうか。 
  </p>
  <pre>
    // 通常 for 文 (プリミティブ版)
    for (int i = 0 ; i &lt; number ; i ++) {
    }
    // 通常 for 文 (ラッパークラス版)
    for (Integer i = 0 ; i &lt; number ; i ++) {
    }
  </pre>
  <p>
    次は拡張 for 文に <m>Range</m> オブジェクトを渡してみます。
    Groovy でもそのままの構文で使えます。
  </p>
  <pre>
    // 拡張 for 文 (プリミティブ版)
    for (int i : 0 ..&lt; number) {
    }
    // 拡張 for 文 (ラッパークラス版)
    for (Integer i : 0 ..&lt; number) {
    }
  </pre>
  <p>
    最後は <m>each</m> メソッドです。
  </p>
  <pre>
    // each メソッド (プリミティブ版)
    (0 ..&lt; number).each() { int i -&gt;
    }
    // each メソッド (ラッパークラス版)
    (0 ..&lt; number).each() { Integer i -&gt;
    }
  </pre>
  <p>
    繰り返し回数の <m>number</m> を 1000 万にして試した結果が以下になります。
  </p>
  <table>
    <tr><th>タイプ</th><th>所要時間</th></tr>
    <tr><td>通常 for 文 (プリミティブ版)</td><td>5 ms</td></tr>
    <tr><td>通常 for 文 (ラッパークラス版)</td><td>78 ms</td></tr>
    <tr><td>拡張 for 文 (プリミティブ版)</td><td>20 ms</td></tr>
    <tr><td>拡張 for 文 (ラッパークラス版)</td><td>20 ms</td></tr>
    <tr><td><m>each</m> メソッド (プリミティブ版)</td><td>577 ms</td></tr>
    <tr><td><m>each</m> メソッド (ラッパークラス版)</td><td>486 ms</td></tr>
  </table>
  <p>
    ということで、一番速いのは由緒正しき普通の for 文を普通にプリミティブ型で使った場合らしいです。
    同じ普通の for 文でも、ループ変数をラッパークラス型にするとかなり遅くなるのは、<c>i ++</c> の実行がラッパークラスになってる分だけ遅くなってるからだと思います。
    次に速いのは拡張 for 文で、これについてはプリミティブ型でもラッパークラス型でも速度の違いがあまり出ませんでした。
    一番遅いのは <m>each</m> メソッドで、ダントツで遅いです。
    ただ、同じ <m>each</m> メソッドでも、こちらはラッパークラスを使った方が速いようです。
    おそらく、<c>0 ..&lt; number</c> で <m>Range</m> オブジェクトを作るときに、内部的に <m>Integer</m> として数値を扱っているため、プリミティブ型で受け取ろうとするとアンボクシング処理が入るからでしょうか。
  </p>
  <p>
    ちなみに、静的コンパイルにしても特に結果は変わりませんでした。
    メソッド呼び出しとかがこれといってないので、当然といえば当然ですが。
  </p>
  <p>
    ということで、Groovy でループを回したければ普通に for 文を使うのが一番速いということでした。
    せっかく Groovy なんだし <m>each</m> とか使っていきたいところですが、遅いのが難点ですね･･･。
  </p>

</page>
