<?xml version="1.0" encoding="UTF-8"?>

<page>
  <name>Groovy の AST 変換</name>

  <h1>日記 (2016 年 6 月 11 日)</h1>
  <p>
    Groovy は JVM 上で動くスクリプト言語です。
    文法がほとんど Java と同じなので覚えるのも簡単で、Java のライブラリがそのまま使えて便利です。
    さらに、スクリプト言語というと実行速度が怪しまれますが、静的コンパイルを行うことで (動的型付け言語としての機能が制限されますが) Java 並の速度が出ます。
    ということで、Groovy の宣伝でした。
  </p>
  <p>
    さて、Groovy ではプリミティブ型は必ずそのラッパークラスとして扱われます (厳密には微妙に違うみたいですけど)。
    つまり、<m>int</m> 型で変数を宣言しても内部では <m>Integer</m> 型として扱われるので、普通に <m>toString</m> メソッドなどが呼べます。
    それなら、<c>int</c> なんて書いて変数を宣言せずに <c>Integer</c> と書いた方が統一感が出るし良いと思いませんか?
    結局は同じなのでどちらで書いても良いんですが、1 つだけ注意点があります。
  </p>
  <p>
    例えば、Java で書かれたクラスに <m>int</m> を引数にとるメソッド <m>foo</m> が定義されていたとして、Groovy でこのクラスのサブクラスを作り、メソッド <m>foo</m> をオーバーライドすることを考えます。
    このとき、当たり前といえば当たり前ですが、引数の型を <m>Integer</m> にするとオーバーライドだと見なされません。
    でも、こういうときだけ <m>int</m> にするのもなんか統一感がなくて気持ち悪いですよね?
  </p>
  <p>
    こんなときに登場するのが、AST 変換です。
    これは何かというと、バイトコードにコンパイルするときに、ソースコードから生成された構文木に手を加えられる機能です。
    これを用いて、<m>Integer</m> 型のメソッド引数をコンパイル時に <m>int</m> 型にしてしまいましょう。
  </p>
  <p>
    まずは、どのメソッドの引数の型を変換するかを指定するアノテーションを作ります。
    いたって普通です。
  </p>
  <pre>
    @Retention(RetentionPolicy.SOURCE)
    @Target([ElementType.METHOD])
    @GroovyASTTransformationClass(["ziphilib.transform.ConvertPrimitiveTransformation"])
    @CompileStatic
    public @interface ConvertPrimitive {
    }
  </pre>
  <p>
    <m>GroovyASTTransformationClass</m> というアノテーションが重要で、構文木に手を加えるときのその内容が書かれたクラスをこれで指定します。
  </p>
  <p>
    さて、引数の型を置き換えるためのクラスが以下です。
    <m>visit</m> メソッドが実際に構文木を書き換えている部分です。
  </p>
  <pre>
    @GroovyASTTransformation(phase=CompilePhase.SEMANTIC_ANALYSIS)
    @CompileStatic
    public class ConvertPrimitiveTransformation implements ASTTransformation {
      public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {
        MethodNode method = (MethodNode)nodes[1]
        method.getParameters().each() { Parameter parameter -&gt;
          String typeName = parameter.getType().getName()
          if (typeName == "java.lang.Integer") {
            parameter.setType(ClassHelper.make("int"))
          }
        }
      }
    }
  </pre>
  <p>
    まず、<m>GroovyASTTransformation</m> というアノテーションですが、これは構文木をバイトコードにするどの段階で <m>visit</m> メソッドを実行するかを指定しています。
    詳しくは別のところを見てください。
  </p>
  <p>
    で、実際の処理内容が書かれる <m>visit</m> メソッドですが、引数として <m>nodes</m> と <m>sourceUnit</m> が渡されます。
    <m>nodes</m> は要素数が 2 の配列で、使われたアノテーションそのものの構文木データと、そのアノテーションがつけられたメソッドなどの構文木データが、順に格納されています。
    今回はメソッドの内容 (引数の型) を書き換えるので、2 番目の要素を使います。
    ここで得られたメソッドの構文木データ <m>method</m> から、<m>getParameters</m> メソッドで引数データを取得します。
    <m>each</m> メソッドを用いて、各引数データ <m>parameter</m> それぞれに対して処理を行います。
    さて、<m>parameter</m> から <m>getType</m> メソッドで引数の型データを取得し、<m>getName</m> メソッドでその名前を取得します。
    ここで得られる型の名前は、パッケージ名を含む完全修飾名です。
    これが <m>Integer</m> だったときに、<m>int</m> に変換したいわけです。
    そこで、<m>int</m> 型を表す型データが必要なわけですが、それは <m>ClassHelper</m> クラスの静的メソッド <m>make</m> を使うと簡単に作れます。
  </p>
  <p>
    とそんなわけで、やりたいことをするコードが書けたので、これをコンパイルして、型を変換したいメソッドに <m>ConvertPrimitive</m> アノテーションをつけておけば、めでたく変換されます。
  </p>

</page>
