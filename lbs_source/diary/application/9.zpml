<?xml version="1.0" encoding="UTF-8"?>

<page>
  <name>AGC023-C: 階乗の逆元</name>

  <h1>日記 (2018 年 3 月 13 日)</h1>
  <p>
    今日は AGC023 があったんですが、そこの C 問題で階乗の逆元の求め方が分からず戸惑ってしまったので、簡単にまとめておきます。
    問題は<a href="https://beta.atcoder.jp/contests/agc023/tasks/agc023_c" target="_blank">こちら</a>です。
  </p>
  <p>
    面倒なので詳細は省きますが、どんな順列に対しても、そのスコア <i>s</i> は必ず (<i>N</i> ＋ 1)/2 ≦ <i>s</i> ≦ <i>N</i> － 1 の範囲になります。
    また、この範囲の <i>s</i> に対し、スコア <i>s</i> 以下の順列の個数は (<i>s</i> － 1)!<i>s</i>!/(2<i>s</i> － <i>N</i>)! で求まります。
    ということで、階乗の積や商を求めることができればこの問題は解けるのですが、普通に計算したら 8 バイト整数の範囲すら超えるので、10<sup>9</sup> ＋ 7 を法とする積や商の求め方を知っている必要があります。
    以下、<i>P</i> ＝ 10<sup>9</sup> ＋ 7 とし、合同式は <i>P</i> を法とします。
  </p>
  <p>
    まず、2 つの数 <i>a</i> と <i>b</i> の積を mod <i>P</i> のもとで計算するのは簡単で、普通に積を計算した後に <i>P</i> での剰余をとるだけです。
    では、<i>a</i> と <i>b</i> の商はどうするかというと、<i>b</i> の逆元を計算して、これと <i>a</i> との積を計算します。
    <i>P</i> は素数なのでフェルマーの小定理を使うと、<i>b</i> の逆元は <i>b</i><sup><i>P</i>－2</sup> で求まることが分かるので、積の計算に帰着できます。
    愚直に <i>P</i> － 2 回積を計算するのは効率が悪いので、以下のように二分累乗法を用いましょう。
  </p>
  <pre>
    public static final int MOD = 1000000007;

    public long pow(long a, long b) {
      if (b == 0) {
        return 1;
      } else if (b % 2 == 0) {
        long d = pow(a, b / 2);
        return (d * d) % MOD;
      } else {
        long d = pow(a, b - 1);
        return (a * d) % MOD;
      }
    }
  </pre>
  <p>
    さて、すでに述べたように、この問題では階乗の積や商の計算を何度も行うので、あらかじめ階乗とその逆元の値を計算しておきます。
    階乗の逆元は、毎回階乗の <i>P</i> － 2 乗を計算するよりも、<i>n</i>!<sup>－1</sup> ＝ (<i>n</i> ＋ 1)!<sup>－1</sup>·(<i>n</i> ＋ 1) という関係を使うことで、より効率的に計算できます。
  </p>
  <pre>
    public long[][] calcFact(int n) {
      long[] fact = new long[n];
      long[] invfact = new long[n];
      fact[0] = 1;
      for (int i = 1 ; i &lt; n ; i ++) {
        fact[i] = (fact[i - 1] * i) % MOD;
      }
      invfact[n - 1] = pow(fact[n - 1], MOD - 2);
      for (int i = n - 2 ; i &gt;= 0 ; i --) {
        invfact[i] = invfact[i + 1] * (i + 1) % MOD;
      }
      return new long[][]{fact, invfact};
    }
  </pre>
  <p>
    というわけで、あとはこれらのメソッドを使って解答を計算するだけです。
  </p>
  <pre>
    public void run() {
      BetterScanner scanner = new BetterScanner(System.in);

      int n = scanner.nextInt();
      long[][] fact = calcFact(n);

      long res = 0;
      long prev = 0;
      for (int s = (n + 1) / 2 ; s &lt;= n - 1 ; s ++) {
        long val = fact[0][s - 1] * fact[0][s] % MOD * fact[1][2 * s - n] % MOD;
        res = (s * (val - prev + MOD) % MOD + res) % MOD;
        prev = val;
      }
      System.out.println(res);
    }
  </pre>

</page>
