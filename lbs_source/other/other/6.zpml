<?xml version="1.0" encoding="UTF-8"?>

<page>
  <name>Ruby Tips</name>

  <h1>実行環境など</h1>
  <p>
    以下のコードは全て Ruby 2.2.2p95 で動作確認をしている。
  </p>
  <p>
    罫線で区切られたソースコードより下の部分は、標準出力とエラー出力を合わせた出力である。
    なお、Ruby では標準出力はデフォルトでバッファリングされるが、バッファリングされない場合の出力を記載している。
    したがって、標準出力とエラー出力が混ざるようなコードに対しては、実際の出力内容とこのページに書かれた出力内容とで行の順番が異なる可能性がある。
    <c>$stdout.sync = true</c> などを前もって実行しておくなどして、バッファリングを無効化しておくと良い。
  </p>
  <h1>スコープ, ブロック</h1>
  <h2>束縛, スコープ</h2>
  <p>
    オブジェクトに名前が与えらている状態を「束縛」という。
    例えば、<c>variable = 9</c> というコードを実行すると、<m>9</m> というオブジェクトに <m>variable</m> という名前を与えているという束縛ができ上がる。
    この束縛が共有される範囲を「スコープ」という。
  </p>
  <pre>
    a = 7
    b = "abcd"
    c = Array.new(3)
    p a
    p c
    class Foo
      p c
    end
  </pre>
  <samp>
    7
    [nil, nil, nil]
    ****.rb:7:in `&lt;class:Foo&gt;': undefined local variable or method `c' for Foo:Class (NameError)
      from ****.rb:6:in `&lt;main&gt;'
  </samp>
  <p>
    上の例では、初めの 3 行で 3 つの束縛が定義される。
    4 行目で、<m>a</m> という名前を束縛するオブジェクトである <m>7</m> を表示している。
    5 行目では、<m>c</m> に対して同じことを行っている。
    <m>a</m> と <m>c</m> の束縛はその前の行で定義されているから、ここまでは束縛が共有されていることになる。
    しかし、7 行目で <m>c</m> を束縛するオブジェクトを表示しようとするとエラーになる。
    これは、7 行目の実行時点では <m>c</m> に関する束縛が存在しないからで、最初の 5 行でが存在していたはずの束縛がここでは共有されていないことになる。
    すなわち、スコープが異なるということになる。
  </p>
  <p>
    スコープが変化するのは、モジュール定義 (クラス定義を含む) とメソッドである。
    このようなスコープが変化する場所を「スコープゲート」という。
    この言葉を用いて言い換えれば、Ruby のスコープゲートは <m>module</m>, <m>class</m>, <m>def</m> の 3 つである。
  </p>
  <pre>
    a = 1
    class Test
      b = 2
      p [:in_class, local_variables]
      def foo
        c = 3
        p [:in_method, local_variables]
      end
    end
    test = Test.new
    test.foo
    p [:in_main, local_variables]
  </pre>
  <samp>
    [:in_class, [:b]]
    [:in_method, [:c]]
    [:in_main, [:a, :test]]
  </samp>
  <p>
    上のソースコードには、トップレベルのスコープ, <m>Test</m> クラス内のスコープ, <m>foo</m> メソッド内のスコープの 3 つのスコープが存在する。
    スコープが異なるので、それぞれのスコープで定義された束縛 (ローカル変数の定義) は別のスコープでは共有されない。
    上のように、ローカル変数の束縛の有無は <m>Kernel#local_variables</m> で確認できる。
  </p>
  <h2>フラットスコープ</h2>
  <p>
    スコープゲートをメソッド呼び出しに置き換えれば、スコープが新しく作られないので変数を共有できる。
    これをうまく使うと、一部のメソッドのみで共有されるローカル変数を作ることができる。
  </p>
  <pre>
    class Test
      def self.define
        shared = 0
        define_method(:display) do
          p shared
        end
        define_method(:plus_one) do
          shared += 1
        end
      end
      def foo
        p shared
      end
    end
    Test.define
    test = Test.new
    test.display
    test.plus_one
    test.display
    test.foo
  </pre>
  <samp>
    0
    1
    ****.rb:12:in `foo': undefined local variable or method `shared' for #&lt;Test:0x00000002a0dc58&gt; (NameError)
      from ****.rb:20:in `&lt;main&gt;'
  </samp>
  <h2>ブロック</h2>
  <p>
    Ruby のブロックは、コードと束縛のペアである。
    ブロックは、それが定義された時点での束縛を保持し、ブロックが実行されるときはその保持した束縛のもとでコードが実行される。
  </p>
  <pre>
    def foo(&amp;block)
      x = 5
      block.call
    end
    x = 3
    foo do
      p x
    end
  </pre>
  <samp>
    3
  </samp>
  <p>
    上のソースコードでは、6 行目の <m>do</m> から 8 行目の <m>end</m> までがブロックである。
    このブロックが定義された時点では、<m>3</m> というオブジェクトに <m>x</m> というローカル変数が束縛されている。
    <m>foo</m> メソッドが 6 行目で呼ばれると、メソッド定義内の 2 行目以降のコードが、新しいスコープで実行される。
    ここでは、<m>2</m> に <m>x</m> というローカル変数が束縛されているが、<c>block.call</c> でブロックを実行すると、ブロックが保持している束縛をもとにブロックの内容である <c>p x</c> が実行されるので、上のような出力が得られるのである。
  </p>
  <h2>proc, lambda</h2>
  <p>
    ブロックはオブジェクトではないが、オブジェクトに変換することはできる。
    このときにできるのが <m>Proc</m> クラスのインスタンスである。
    ブロックから <m>Proc</m> インスタンスを得るには、<m>Proc.new</m>, <m>Kernel#proc</m>, <m>Kernel#lambda</m>, 矢印演算子の 4 つの方法がある。
    <m>Proc.new</m> と <m>Kernel#proc</m> はどちらを使っても同じインスタンスを返し、<m>Kernel#lambda</m> と矢印演算子の 2 つも同じだが、例えば <m>Proc.new</m> を使って生成したものと <m>Kernel#lambda</m> を使って生成したものは微妙に違う。
    <m>Proc.new</m> や <m>Kernel#proc</m> を用いたものを「proc」と呼び、<m>Kernel#lambda</m> や矢印演算子を用いたものを「lambda」と呼ぶ。
  </p>
  <p>
    proc と lambda の違いは全てを説明しようとすると非常に複雑だが、主に 2 つである。
    まず、<m>return</m> の挙動が異なる。
    proc 内で <m>return</m> を呼ぶと proc が定義されているスコープから戻ろうとするが、lambda で <m>return</m> を呼ぶと単に lambda から戻るだけである。
  </p>
  <pre>
    def proc_test
      block = proc {return 1}
      block.call
      return 0
    end
    def lambda_test
      block = lambda {return 1}
      block.call
      return 0
    end
    p proc_test
    p lambda_test
  </pre>
  <samp>
    1
    0
  </samp>
  <p>
    また、proc より lambda の方が引数の扱いに厳しく、lambda に対して定義と異なる引数の数で呼びだそうとするとエラーが生じる。
    ただし、これには特殊ケースがいろいろあり、実際は複雑である。
  </p>
  <p>
    なお、proc や lambda はどちらもブロックをオブジェクト化しただけなので、保持している束縛はブロックと同じように定義時点の束縛である。
    同じスコープであっても、proc や lambda が定義された後で定義された束縛は共有されていない。
  </p>
  <pre>
    lambda = lambda {p x}
    x = 3
    lambda.call
  </pre>
  <samp>
    ****.rb:1:in `block in &lt;main&gt;': undefined local variable or method `x' for main:Object (NameError)
      ****.rb:3:in `call'
      ****.rb:3:in `&lt;main&gt;'
  </samp>
  <h2><m>Method</m>, <m>UnboundMethod</m></h2>
  <p>
    メソッドはオブジェクトではないが、ブロックと同じようにオブジェクトに変換することはできる。
    これは <m>Object#method</m> により行われ、<m>Method</m> インスタンスが得られる。
    <m>Method</m> インスタンスはブロックとは異なり、定義時のスコープではなく、生成するときにレシーバに指定したオブジェクトのスコープで評価される。
  </p>
  <pre>
    class Test
      def initialize
        @variable = 0
      end
      def foo
        p @variable
      end
    end
    test = Test.new
    foo = test.method(:foo)
    foo.call
  </pre>
  <samp>
    0
  </samp>
  <p>
    上のようにして得られた <m>Method</m> インスタンスに対して <m>Method#unbind</m> を呼ぶか、<m>Module#instance_method</m> を用いるかすると、<m>UnboundMethod</m> インスタンスが得られる。
    これは、束縛をもたないメソッドのようなものである。
    そのままでは実行できないが、<m>UnboundMethod#bind</m> を用いて適当なオブジェクトに束縛すれば実行できるようになる。
    このとき当然だが、束縛するオブジェクトはもとのクラスと同じクラスかそのサブクラスのインスタンスである必要がある。
    もともとがモジュールにあったメソッドであれば、このような制限はない。
  </p>
  <pre>
    class Test
      def initialize
        @variable = 0
      end
      def foo
        p @variable
      end
    end
    foo = Test.instance_method(:foo)
    test = Test.new
    test.instance_eval do
      @variable = 5
    end
    bounded_foo = foo.bind(test)
    bounded_foo.call
  </pre>
  <samp>
    5
  </samp>
  <p>
    <m>UnboundMethod</m> インスタンスは <m>Module#define_method</m> の第 2 引数に渡すことができる。
  </p>
  <pre>
    module Test
      def foo
        puts("foo")
      end
    end
    foo = Test.instance_method(:foo)
    String.send(:define_method, :foo, foo)
    "String".foo
  </pre>
  <samp>
    foo
  </samp>
  <p>
    <m>Method</m> インスタンスの呼び出しは、lambda の呼び出しと同じように引数の個数に厳密である。
    引数の数が異なるとエラーになる。
  </p>
  <h2><m>Binding</m></h2>
  <p>
    Ruby ではほとんど全てのものがオブジェクトなので、束縛もオブジェクトにすることができる。
    束縛は <m>Binding</m> インスタンスで管理する。
    <m>Kernel#binding</m> により、このメソッドが呼び出されたスコープ全体の束縛を保持した <m>Binding</m> インスタンスが取得できる。
    <m>Binding</m> インスタンスは <m>Kernel#eval</m> の第 2 引数に指定でき、第 1 引数の文字列をその <m>Binding</m> インスタンスが保持する束縛のもとで評価される。
  </p>
  <pre>
    x = 5
    test_binding = binding
    y = 3
    eval("p x", test_binding)
    eval("p y", test_binding)
  </pre>
  <samp>
    5
    3
  </samp>
  <p>
    上の例からも分かるが、<m>Binding</m> インスタンスが保持するのはスコープ全体の束縛である。
    したがって、同じスコープ内であればどこで <m>Binding</m> インスタンスを生成しても同じものが得られる。
  </p>
  <p>
    <m>Binding</m> インスタンスは <m>Proc#binding</m> を用いても生成できる。
    これはレシーバが定義されているスコープ全体の束縛を保持した <m>Binding</m> インスタンスを返す。
    ブロックが保持する束縛は定義時に存在していたものだけなので、この違いには注意すること。
  </p>
  <pre>
    block = -&gt; {p x}
    x = 3
    block_binding = block.binding
    eval("p x", block_binding)
    block.call
  </pre>
  <samp>
    3
    ****.rb:1:in `block in &lt;main&gt;': undefined local variable or method `x' for main:Object (NameError)
      from ****.rb:5:in `call'
      from ****.rb:5:in `&lt;main&gt;'
  </samp>
  <p>
    組み込み定数である <m>TOPLEVEL_BINDING</m> にはトップレベルのスコープの <m>Binding</m> インスタンスが格納されている。
    これを使うと、ソースコード上のどの位置でもトップレベルにアクセスできる。
  </p>
  <pre>
    class Test
      def foo
        eval("p self", TOPLEVEL_BINDING)
      end
    end
    Test.new.foo
  </pre>
  <samp>
    main
  </samp>
  <h1>クラス, モジュール, メソッド</h1>
  <h2>基本</h2>
  <p>
    Ruby には「クラスのようなもの」としてクラスとモジュールがある。
    Ruby ではほとんど全てのものがオブジェクトなので、当然クラスそのものやモジュールそのものもオブジェクトである。
    クラスは <m>Class</m> クラスのインスタンスで、モジュールは <m>Module</m> クラスのインスタンスである。
    クラスやモジュールは、どちらもインスタンスメソッドをもつことができるという点で、通常のオブジェクトと異なる。
  </p>
  <p>
    クラスは、インスタンスの生成とスーパークラスの参照という 2 つの機能をモジュールに追加したものである。
    逆に言えば、モジュールは、インスタンスの生成ができずスーパークラスをもたないクラスだと考えられる。
    実際、<m>Class</m> は <m>Module</m> のサブクラスで、<m>Class</m> で新しく定義されているインスタンスメソッドは <m>new</m>, <m>allocate</m>, <m>superclass</m> の 3 つだけである。
  </p>
  <h2>特異クラス</h2>
  <p>
    オブジェクトは全て特異クラスをもつ。
    特異クラスは継承ができず、オブジェクトの特異メソッドはこの特異クラスに定義される。
    特異クラスは <m>Object#singleton_class</m> で取得できる。
    普通のオブジェクトの特異クラスのスーパークラスはそのオブジェクトのクラスである。
  </p>
  <pre>
    string = "abc"
    p string.class
    p string.singleton_class
    p string.singleton_class.superclass
  </pre>
  <samp>
    String
    #&lt;Class:#&lt;String:0x00000002a2eae8&gt;
    String
  </samp>
  <p>
    クラスの特異クラスのスーパークラスはそのクラスのスーパークラスの特異クラスである。
  </p>
  <pre>
    p String.superclass
    p String.singleton_class
    p String.singleton_class.superclass
    p String.superclass.singleton_class
  </pre>
  <samp>
    Object
    #&lt;Class:String&gt;
    #&lt;Class:Object&gt;
    #&lt;Class:Object&gt;
  </samp>
  <p>
    クラスでないモジュールに関しては、普通のオブジェクト同じような挙動を示す。
  </p>
  <pre>
    p Kernel.class
    p Kernel.singleton_class
    p Kernel.singleton_class.superclass
  </pre>
  <samp>
    Module
    #&lt;Class:Kernel&gt;
    Module
  </samp>
  <h2><m>Module#include</m>, <m>Module#prepend</m>, <m>Object#extend</m></h2>
  <p>
    <m>Module#include</m> は、継承チェーンにおいてレシーバとなるモジュールの上に引数のモジュールを追加する。
    逆に、<m>Module#prepend</m> は、モジュールの下に引数のモジュールを追加する。
  </p>
  <pre>
    module M
    end
    module N
    end
    class C
      prepend M
      include N
    end
    class D &lt; C
    end
    p D.ancestors
  </pre>
  <samp>
    [D, M, C, N, Object, Kernel, BasicObject]
  </samp>
  <p>
    <m>Kernel</m> モジュールのインスタンスメソッドがどこでもレシーバなしで呼び出せるのは、<m>Object</m> が <m>Kernel</m> をインクルードしているためである。
  </p>
  <p>
    異なるモジュールを複数インクルードした場合は、順にモジュールのすぐ上にモジュールが追加されていく。
    プリペンドも同様である。
  </p>
  <pre>
    module M
    end
    module N
    end
    class C
      include M
      include N
    end
    p C.ancestors
  </pre>
  <samp>
    [C, N, M, Object, Kernel, BasicObject]
  </samp>
  <p>
    モジュールのインクルードやプリペンドの際に、すでに継承チェーンに属しているモジュールが再び継承チェーンに追加されることはない。
  </p>
  <pre>
    module M
    end
    module N
      include M
    end
    class O
      prepend M
      include N
    end
    p O.ancestors
    p N.ancestors
  </pre>
  <samp>
    [M, O, N, Object, Kernel, BasicObject]
    [N, M]
  </samp>
  <p>
    上の例では、<m>O</m> での継承チェーンは <m>M</m>, <m>O</m>, <m>N</m>, <m>M</m> と続くはずだが、プログラムの 3 行目で行われるはずの <m>M</m> の継承チェーンへの追加は、すでに継承チェーンに <m>M</m> があるため行われない。
    一方、<m>N</m> での継承チェーンにおいては、3 行目での <m>M</m> の追加は 1 回目なので行われる。
  </p>
  <p>
    <m>Object#extend</m> を用いることで、レシーバの特異メソッドに引数のモジュールのインスタンスメソッドを追加できる。
  </p>
  <pre>
    module Extension
      def foo
        puts("foo")
      end
    end
    object = Object.new
    object.extend(Extension)
    object.foo
  </pre>
  <samp>
    foo
  </samp>
  <p>
    クラスメソッドはクラスの特異メソッドだから、同様にしてクラスメソッドも定義できる。
  </p>
  <pre>
    module Extension
      def foo
        puts("foo")
      end
    end
    class ExtendedClass
      extend Extension
    end
    ExtendedClass.foo
  </pre>
  <samp>
    foo
  </samp>
  <p>
    クラスの特異メソッドはクラスの特異クラスのインスタンスメソッドであるから、上のソースコードは以下と等価である。
  </p>
  <pre>
    module Extension
      def foo
        puts("foo")
      end
    end
    class ExtendedClass
      class &lt;&lt; self
        include Extension
      end
    end
    ExtendedClass.foo
  </pre>
  <samp>
    foo
  </samp>
  <h2>メソッド探索</h2>
  <p>
    メソッド探索において注意すべきパターンを挙げておく。
    基本は、まずレシーバの特異クラスを探し、そこになかったらスーパークラスを順にたどって (継承チェーンを上に向かって) 探していく。
    特異クラスにメソッドはないことが多いので、メソッド探索はレシーバの普通の意味でのクラスから始まると考えることもある。
  </p>
  <p>
    クラスにモジュールがプリペンドされている場合は、少し注意が必要である。
  </p>
  <pre>
    module PrependedModule
      def foo
        puts("foo in PrependedModule")
      end
    end
    class Test
      prepend PrependedModule
      def foo
        puts("foo in Test")
      end
    end
    Test.new.foo
  </pre>
  <samp>
    foo in PrependedModule
  </samp>
  <p>
    <m>Test</m> インスタンスに対して <m>foo</m> メソッドを呼ぼうとすると、メソッド探索は <m>Test</m> からではなくその下にある <m>PrependedModule</m> から始まる。
    どんなときでも継承チェーンの一番下からメソッド探索が行われると考えれば良い。
  </p>
  <p>
    以下は、同名のインスタンスメソッドをもつ複数のモジュールをインクルードしている例である。
  </p>
  <pre>
    module ModuleAlpha
      def foo
        puts("foo in ModuleAlpha")
      end
      def bar
        foo
      end
    end
    module ModuleBeta
      def foo
        puts("foo in ModuleBeta")
      end
    end
    class Test
      include ModuleAlpha
      include ModuleBeta
    end
    p Test.ancestors
    test = Test.new
    test.bar
  </pre>
  <samp>
    [Test, ModuleBeta, ModuleAlpha, Object, Kernel, BasicObject]
    foo in ModuleBeta
  </samp>
  <p>
    <c>Test.new.test</c> が呼ばれた時点で、<m>self</m> が <m>test</m> に変わり、メソッド探索が始まる。
    まず、<m>bar</m> メソッドを探索する。
    これは <m>test</m> のクラスである <m>Test</m> にないので、次に <m>ModuleBeta</m> を探すがここにもないので、<m>ModuleAlpha</m> を探してここで見つかるので、<m>ModuleAlpha#bar</m> が実行される。
    このメソッドの内部では <m>foo</m> メソッドが呼ばれているが、レシーバがないので <m>self</m> に対するメソッド呼び出しだと解釈されて <c>self.foo</c> と同様の挙動を示す。
    すなわち、ここでは <c>test.foo</c> と書かれているのと同じように動く。
    したがって、再びメソッド探索が開始する。
    <m>test</m> のクラスである <m>Test</m> には <m>foo</m> はないので、<m>ModuleBeta</m> を探しここで見つかるので、<m>ModuleBeta#foo</m> が実行される。
    結果的に、上で示した出力を得る。
    ソースコードだけを見ると、<m>ModuleAlpha#bar</m> が呼ばれると同じモジュールに定義されている <m>ModuleAlpha#foo</m> が呼ばれそうだが、実際はそうではない。
  </p>
  <h2>カレントオブジェクト</h2>
  <p>
    Ruby のコードは全てカレントオブジェクト (<m>self</m>) のもとで実行される。
    レシーバを指定せずにメソッドを呼び出すと、レシーバはカレントオブジェクトであると解釈される。
    また、インスタンス変数への参照は、その変数がカレントオブジェクトに属していると解釈される。
  </p>
  <p>
    カレントオブジェクトが変更される場所はいくつかある。
    まず、レシーバを指定してメソッドを呼び出すと、そのメソッドを実行している間は <m>self</m> がそのレシーバになる。
  </p>
  <pre>
    class Test
      def foo
        @x = 10
        p [:foo, self]
        bar
      end
      def bar
        @x += 1
        p [:bar, self]
      end
    end
    test = Test.new
    test.foo
  </pre>
  <samp>
    [:foo, #&lt;Test:0x00000002a2e1d8 @x=10&gt;]
    [:bar, #&lt;Test:0x00000002a2e1d8 @x=11&gt;]
  </samp>
  <p>
    モジュール定義 (クラス定義を含む) の内部では、<m>self</m> はそのモジュールそのものになる。
    ただし、メソッド定義の内部では、上で述べたようにメソッドのレシーバが <m>self</m> である。
  </p>
  <pre>
    class Test
      p [:in_class, self]
      def foo
        p [:in_method, self]
      end
    end
    Test.new.foo
  </pre>
  <samp>
    [:in_class, Test]
    [:in_method, #&lt;Test:0x000000029de570&gt;]
  </samp>
  <p>
    上で述べたようなものと同じ機能をもつメソッドのブロック内でも <m>self</m> が変化する。
    例えば、クラス定義に相当する <m>Class.new</m> のブロック内ではその返り値が <m>self</m> になるし、<m>Module#define_method</m> のブロック内ではメソッドのレシーバが <m>self</m> になる。
  </p>
  <h2>カレントモジュール</h2>
  <p>
    Ruby ではカレントモジュールというものもある。
    メソッドを定義すると、カレントモジュールのインスタンスメソッドになる。
  </p>
  <p>
    トップレベルでは、カレントモジュールは <m>Object</m> である。
    モジュール定義 (クラス定義を含む) の内部では、そのモジュールがカレントモジュールになる。
    メソッドの内部では、カレントオブジェクトのクラスがカレントモジュールになる。
  </p>
  <h2><m>BasicObject#instance_eval</m>, <m>Module#class_eval</m></h2>
  <p>
    <m>BasicObject#instance_eval</m> は、レシーバのコンテキストで与えられたブロックを評価する。
    すなわち、与えたブロック内でのカレントオブジェクトをレシーバ自身にし、カレントモジュールをレシーバの特異クラスにする。
    特に前者の効果により、レシーバのインスタンス変数や private なメソッドなどにアクセスができる。
  </p>
  <pre>
    class Test
      def initialize
        @variable = 0
      end
      private def foo
        puts("foo")
      end
    end
    x = 5
    test = Test.new
    test.instance_eval do
      foo
      p @variable
      @variable = x
    end
    test.instance_eval do
      p @variable
    end
  </pre>
  <samp>
    foo
    0
    5
  </samp>
  <p>
    <m>Module#class_eval</m> は、レシーバのクラスのコンテキストで与えられたブロックを評価する。
    すなわち、与えられたブロック内でのカレントオブジェクトとカレントモジュールをともにレシーバ自身にする。
  </p>
  <p>
    なお、<m>BasicObject#instance_eval</m>, <m>Module#class_eval</m> のそれぞれに対して、ブロックに引数を与えることができる <m>BasicObject#instance_exec</m>, <m>Module#class_exec</m> というものもある。
  </p>
  <h2>アクセス制御</h2>
  <p>
    Ruby のメソッドの可視性には、private, protected, public の 3 種類が存在する。
  </p>
  <p>
    private なメソッドはレシーバをつけて呼び出すことができなくなる。
    すなわち、そのメソッドが <m>self</m> に対して呼び出されるものであるようなスコープでしか呼び出せなくなる。
  </p>
  <pre>
    class Foo
      private def foo
        puts("foo called")
      end
      def bar
        foo
      end
    end
    Foo.new.bar
    Foo.new.foo
  </pre>
  <samp>
    foo called
    ****.rb:10:in `&lt;main&gt;': private method `foo' called for #&lt;Foo:0x00000002aae838&gt; (NoMethodError)
  </samp>
  <p>
    private メソッドのルールはあくまで「レシーバをつけて呼び出せない」であるので、例えば明示的に <m>self</m> に対して呼び出そうとするとエラーになる。
  </p>
  <pre>
    class Foo
      private def foo
        puts("foo called")
      end
      def bar
        self.foo
      end
    end
    Foo.new.bar
  </pre>
  <samp>
    ****.rb:6:in `bar': private method `foo' called for #&lt;Foo:0x00000002a2e8e0&gt; (NoMethodError)
      from ****.rb:9:in `&lt;main&gt;'
  </samp>
  <p>
    また、スーパークラスから継承したメソッドはレシーバなしで呼べるので、そのメソッドが private であってもサブクラスから呼び出せる。
  </p>
  <pre>
    class SuperFoo
      private def foo
        puts("foo called")
      end
    end
    class Foo &lt; SuperFoo
      def bar
        foo
      end
    end
    Foo.new.bar
  </pre>
  <samp>
    foo called  
  </samp>
  <p>
    なお、アクセサメソッド (<c>def hoge=(value)</c> で定義できるもの) はレシーバとして <m>self</m> だけは許される。
    レシーバなしの呼び出しのみ可能にすると、変数への代入と区別したいときに困るからだろう。
  </p>
  <p>
    protected なメソッドは、そのメソッドをもつオブジェクトが <m>self</m> であるような場所でのみ呼び出せる。
    private との違いは例えば以下のコードで分かる。
  </p>
  <pre>
    class Foo
      private def private
        puts("private called")
      end
      protected def protected
        puts("protected called")
      end
      def bar
        protected
        private
        Foo.new.protected
        Foo.new.private
      end
    end
    foo = Foo.new
    foo.bar
  </pre>
  <samp>
    protected called
    private called
    protected called
    ****.rb:12:in `bar': private method `private' called for #&lt;Foo:0x00000002a2e2a0&gt; (NoMethodError)
      ****.rb:16:in `&lt;main&gt;'
  </samp>
  <p>
    このコードでは、<c>foo.bar</c> を実行する段階で、9 行目から始まる <m>bar</m> メソッドの中身を実行し始めるが、ここでの <m>self</m> は <m>foo</m> であるから、<m>foo</m> がもつ protected なメソッドが呼び出せる。
    <c>Foo.new.private</c> がエラーになるのはすでに述べた通りである。
  </p>
  <p>
    <m>Object#send</m> を用いると、可視性に関係なくメソッドを呼び出せる。
  </p>
  <pre>
    class Foo
      private def private
        puts("private called")
      end
      protected def protected
        puts("protected called")
      end
    end
    Foo.new.send(:private)
    Foo.new.send(:protected)
  </pre>
  <samp>
    private called
    protected called
  </samp>
  <p>
    メソッドの可視性の設定は、<m>Module#private</m>, <m>Module#protected</m>, <m>Module#public</m> を用いる。
    これらを引数なしで呼び出すと、それ以降で定義されるメソッドがその可視性に設定される。
    シンボルか文字列を引数に渡す (複数指定できる) と、その名前をもつメソッドがその可視性に設定される。
    なお、Ruby 2.1.0 からはメソッド定義式がその名前のシンボルを返すようになったので、上のように <c>private def foo</c> と書ける。
  </p>
  <h1><m>Enumerable</m></h1>
  <h2><m>Enumerable#chunk</m></h2>
  <p>
    <m>Enumerable#chunk</m> は、要素を初めから順にブロックで評価し、評価値が同じになる部分をグループ化してできる <m>Enumerator</m> インスタンスを返す。
    返される <m>Enumerator</m> インスタンスは、ブロックの評価値とその評価値になるもとの要素からなる配列のペアを順に回す。
  </p>
  <pre>
    array = [2, 6, 7, 9, 1, 4, 1, 7]
    array.chunk{|s| s.even?}.each do |element|
      p element
    end
  </pre>
  <samp>
    [true, [2, 6]]
    [false, [7, 9, 1]]
    [true, [4]]
    [false, [1, 7]]
  </samp>
  <p>
    ブロックの評価値が <m>nil</m> か <m>:_separator</m> である場合は、その要素は返される <m>Enumerator</m> インスタンスに含まれなくなる。
    この前後でブロックは区切られる。
    例えば、ファイルを読み込んで 1 行ずつ分割したいが、ハイフン 5 つからなる行でさらに分割したい場合に、以下のように書ける。
  </p>
  <pre>
    separated = DATA.chunk do |line|
      next (line != "-----\n") || nil
    end
    separated.each do |_, data|
      pp data
    end
    __END__
    AAAAA
    AAAAA
    AAAAA
    -----
    -----
    BBBBB
    BBBBB
    BB
    -----
    CCCCC
  </pre>
  <samp>
    ["AAAAA\n", "AAAAA\n", "AAAAA\n"]
    ["BBBBB\n", "BBBBB\n", "BB\n"]
    ["CCCCC"]
  </samp>
  <p>
    ブロックの評価値が <m>:_alone</m> である場合は、その要素は単独のブロックをなす。
  </p>
  <pre>
    separated = DATA.chunk do |line|
      next (line != "-----\n") || :_alone
    end
    separated.each do |_, data|
      pp data
    end
    __END__
    AAAAA
    AAAAA
    AAAAA
    -----
    -----
    BBBBB
    BBBBB
    BB
    -----
    CCCCC
  </pre>
  <samp>
    ["AAAAA\n", "AAAAA\n", "AAAAA\n"]
    ["-----\n"]
    ["-----\n"]
    ["BBBBB\n", "BBBBB\n", "BB\n"]
    ["-----\n"]
    ["CCCCC"]
  </samp>
  <h2><m>Enumerable#find</m> の 第 1 引数</h2>
  <p>
    <m>Enumerable#find</m> はブロックを評価して最初に真になる要素を返すが、引数を指定することで真になる要素が見つからなかったときの返り値を指定できる。
    このときの引数は、単なる値ではなく <m>Proc</m> インスタンス (<m>call</m> メソッドをもっていれば他のオブジェクトでも良い) である。
    単に <m>call</m> を呼び出すだけで、引数は与えない。
  </p>
  <pre>
    array = [2, 6, 7, 9, 1, 4, 1, 7]
    proc = -&gt; do 
      next :none
    end
    p array.find(proc){|s| s % 5 == 0}
  </pre>
  <samp>
    :none
  </samp>
  <h2>ブロックなしの <m>Enumerable</m> のメソッド</h2>
  <p>
    ブロックなしの <m>Enumerable#map</m> は <m>Enumerator</m> インスタンスを返す。
    繰り返しのできるオブジェクト (何でも良い) を <m>Enumerator</m> インスタンスに変換するという認識で良いのだろうか･･･。
  </p>
  <pre>
    DATA.map.with_index do |element, i|
      p [i, element]
    end
    __END__
    foo
    hoge
    hugahuga
    bar
  </pre>
  <samp>
    [0, "foo\n"]
    [1, "hoge\n"]
    [2, "hugahuga\n"]
    [3, "bar"]
  </samp>
  <p>
    上のコードの <c>DATA.map.with_index</c> を <c>DATA.with_index</c> にすることはできない。
    これは、<m>DATA</m> が <m>File</m> インスタンス (<m>File</m> は <m>Enumerable</m> を Mix-in している) であるため、<m>Enumerator</m> クラスで定義される <m>with_index</m> メソッドが呼べないためである。
  </p>
  <p>
    <m>Enumerable#map</m> に限らず、ブロックをとる <m>Enumerable</m> のメソッドは、たいていブロックを指定しないと対応する <m>Enumerator</m> インスタンスを返すようになっている。
    例えば、おもしろくない例だが、以下のような感じである。
  </p>
  <pre>
    array = [2, 7, 1, 8, 2, 8]
    array.find.each_with_index do |element, i|
      p [i, element]
    end
  </pre>
  <samp>
    [0, 2]
  </samp>
  <h1>リテラル</h1>
  <h2>% 記法</h2>
  <p>
    % 記法は <m>%Q</m>, <m>%q</m>, <m>%s</m>, <m>%r</m>, <m>%W</m>, <m>%w</m>, <m>%x</m> の 7 種類で、<m>%Q</m> と <m>%q</m> は文字列、<m>%s</m> はシンボル、<m>%r</m> は正規表現、<m>%W</m> と <m>%w</m> は配列、<m>%x</m> はコマンド出力を表す。
    大文字版と小文字版があるものは、式展開やバックスラッシュ記法の有無が異なる。
    大文字の方は式展開などが行われ (文字列リテラルのダブルクォートに相当)、小文字の方は式展開などが行われない (文字列リテラルのシングルクォートに相当)。
    また、<m>%r</m> では式展開だけが行われ、バックスラッシュ記法は無効である。
    アルファベットを省略した場合は <m>%Q</m> であると解釈される。
  </p>
  <pre>
    p %|A'B'C/D"E"F\u0061=#{2*2}|
    p %Q{A'B'C/D"E"F\u0061=#{2*2}}
    p %q[A'B'C/D"E"F\u0061=#{2*2}]
    p %s$A'B'C/D"E"F\u0061=#{2*2}$
    p %r!A'B'C/D"E"F\u0061=#{2*2}!
    p %W$A'B' C/D "E"F \u0061=#{2*2}$
    p %w$A'B' C/D "E"F \u0061=#{2*2}$
    p %x*echo hello*
  </pre>
  <samp>
    "A'B'C/D\"E\"Fa=4"
    "A'B'C/D\"E\"Fa=4"
    "A'B'C/D\"E\"F\\u0061=\#{2*2}"
    :"A'B'C/D\"E\"F\\u0061=\#{2*2}"
    /A'B'C\/D"E"F\u0061=4/
    ["A'B'", "C/D", "\"E\"F", "a=4"]
    ["A'B'", "C/D", "\"E\"F", "\\u0061=\#{2*2}"]
    "hello\n"
  </samp>
  <p>
    <m>%W</m> と <m>%w</m> はスペースで要素が区切られるが、<m>%W</m> において式展開が含まれる場合はその評価を行う前に要素に区切られる。
  </p>
  <pre>
    string = "X Y"
    p %W(A\ B #{string}C\sD #{3 * 3})
  </pre>
  <samp>
    ["A B", "X YC D", "9"]
  </samp>
  <h2>ヒアドキュメント</h2>
  <p>
    <m>&lt;&lt;</m> に続けて、クォートで括られた何らかの識別子を書くと、それの次の行からその識別子だけの行の直前の行までがリテラルになる。
    ダブルクォートを利用した場合は式展開やエスケープが有効になり、シングルクォートを利用した場合は無効になる。
    識別子をクォートで括らなかった場合は、ダブルクォートで囲った場合と同じになる。
  </p>
  <pre>
    p &lt;"EOB"
    String Line 1
    String Line 2
    EOB
    p &lt;EOS
    String Line 1
    String Line 2
    EOS
    p &lt;`HELLO`
    echo hello
    HELLO
  </pre>
  <samp>
    "String Line 1\nString Line 2\n"
    "String Line 1\nString Line 2\n"
    "hello\n"
  </samp>
  <p>
    ヒアドキュメントの終了を示す行は識別子だけからなる必要がある。
    識別子の前後にスペースを入れることはできない上に、コメントも書くことができない。
    <m>&lt;</m> の代わりに <m>&lt;-</m> にすると、ヒアドキュメントの終了を表す識別子をインデントすることができるようになるが、依然としてコメントは書けない。
  </p>
  <pre>
    p &lt;"EOB"
    String Line 1
    String Line 2
      EOB  # comment
    String Line 3
    EOB
    p &lt;-"EOB"
    String Line 1
    String Line 2
      EOB
  </pre>
  <samp>
    "String Line 1\nString Line 2\n  EOB  # comment\nString Line 3\n"
    "String Line 1\nString Line 2\n"
    </samp>
  <p>
    文字列リテラルと違い、ヒアドキュメントの中ではクォートをエスケープする必要がない。
    特にシングルクォートによるヒアドキュメントは、完全にソースコードに書かれているそのままの文字列になる。
    以下の例の <m>"</m>, <m>'</m>, <m>\</m> の挙動について特に注目すること。
  </p>
  <pre>
    p &lt;"EOB"
    "AB" 'CD' \"AB\" \'CD\' #{3 * 5} 
    EOB
    p &lt;'EOB'
    "AB" 'CD' \"AB\" \'CD\' #{3 * 5} 
    EOB
  </pre>
  <samp>
    "\"AB\" 'CD' \"AB\" 'CD' 15 \n"
    "\"AB\" 'CD' \\\"AB\\\" \\'CD\\' \#{3 * 5} \n"
  </samp>
  <p>
    <c>&lt;"EOB"</c> などの部分が式になるので、以下のような記述が可能になる。
  </p>
  <pre>
    def method(foo, string, bar)
      p string
    end
    method(1, &lt;"EOB", 2)
    This is a here document.
    line 2
    line 3
    EOB
  </pre>
  <samp>
    "This is a here document.\nline 2\nline 3\n"
  </samp>
  <p>
    1 行に複数のヒアドキュメントを書くことも可能である。
  </p>
  <pre>
    def method(first_string, second_string)
      p first_string
      p second_string
    end
    method(&lt;FIRST, &lt;SECOND)
    first line 1
    first line 2
    FIRST
    second line 1
    second line 2
    SECOND
  </pre>
  <samp>
    "first line 1\nfirst line 2\n"
    "second line 1\nsecond line 2\n"
  </samp>
  <h2>条件式としての範囲式</h2>
  <p>
    範囲式は Ruby ではよく使われるが、実は if などの条件式を書くところでも範囲式を使うことができ、このときは <m>Range</m> インスタンスになるのではなく特殊な振る舞いをする。
  </p>
  <p>
    ドット 2 つの範囲式 (<m>a..b</m> の形式) の挙動は以下の通りである。
    まず初期状態として、1 つ目の式 (上の例では <m>a</m>) が評価され、これが真を返すまでは範囲式全体は false を返す。
    1 つ目の式が真を返すと全体で true を返す。
    このとき、2 つ目の式も真ならば初期状態に戻る。
    これ以降は 2 つ目の式のみを評価し、2 つ目の式が真になるまで全体で true を返す。
    2 つ目式が真になったら全体で true を返し、その後に初期状態に戻る。
  </p>
  <pre>
    (1..20).each do |i|
      if (i % 5 == 0)..(i % 3 == 0)
        puts(i)
      end
    end
  </pre>
  <samp>
    5
    6
    10
    11
    12
    15
    20
  </samp>
  <p>
    ドット 3 つの範囲式 (<m>a...b</m> の形式) の場合は、1 つ目の式が真を返したときに 2 つ目の式が真を返しても初期状態に戻らないところが異なる。
  </p>
  <pre>
    (1..20).each do |i|
      if (i % 5 == 0)...(i % 3 == 0)
        puts(i)
      end
    end
  </pre>
  <samp>
    5
    6
    10
    11
    12
    15
    16
    17
    18
    20
  </samp>
  <p>
    以下は while 文で範囲式を用いた例である。
  </p>
  <pre>
    i = 0
    while (i % 3 == 0)...(i % 5 == 0)
      puts(i)
      i += 1
    end
  </pre>
  <samp>
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
  </samp>
  <h1>その他</h1>
  <h2><m>Kernel#require</m>, <m>Kernel#load</m></h2>
  <p>
    <m>Kernel#require</m> と <m>Kernel#load</m> は外部ファイルを読み込むためのメソッドである。
    これらは、第 1 引数に指定された名前のファイルをロードパスから探し、それをトップレベルで実行する。
    したがって、例えば、読み込んだファイルで定数 (クラス名を含む) が定義されていればトップレベルの定数になる。
    ただし、読み込んだファイルのローカル変数は共有されない。
  </p>
  <p>
    一方、この 2 つのメソッドは、様々な点で異なった挙動を示す。
    まず、<m>Kernel#require</m> はライブラリを読み込むときに用いるもので、<m>Kernel#load</m> はファイルを読み込むときに用いるとされていて、意味合いが異なる。
    また、<m>Kernel#require</m> は拡張子を省略できるが、<m>Kernel#load</m> はできない。
    さらに、<m>Kernel#require</m> は同じファイルは 1 度だけしか実行しないが、<m>Kernel#load</m> は同じファイルであってもこのメソッドが呼ばれれば何度でも実行する。
  </p>
  <p>
    なお、<m>Kernel#load</m> の第 2 引数に true を指定すると、定数を読み込まなくなる。
    より具体的には、読み込むファイルを実行するときに無名のモジュールが作成され、ファイル内の定数はこのモジュールのもとに定義され、ファイルの実行が終わったらこのモジュールは破棄される。
  </p>
  <h2><m>Kernel#require</m>, <m>Kernel#require_relative</m></h2>

</page>
